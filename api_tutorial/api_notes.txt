An api is a software itermediary that allows to or more application to talk to each other.
APi in term of release policy:
> private: it is used within the organization 
> partner: it can be used within business partner 
> public: it can be used within third party developer

example: 
----------
Application(consumer: consume the service) <--------->google map api<-----------> google map(Provide: api provide)


How to use API:
---------------
android application(API Key/token: 32w3434532453245435324)<---> API<--->Application <---->Database


------------------------------------------------------
Web API:
An api, which is interface for web is called as Web API.
it may consiste of one or more endpoints to define request and response

How web api works:
------------------
Android/java app,etc<--------->Web API<-------->web application <----->database

> client makes HTTP response to API
> API will communicate to Web Application/Database (if needed)
> Web application/database provides required data to API
> API return data to client 

How to use web API
-----------------
Register/signup to API
API may provide API key for Authentication purpose 
API keys/token: 325435jkdfsjgf2q35rqwfad
Whenever you need to communicate with server make any request to API with API key
example:  https://geekyshows.com/?key=2323423fdasgfdsfe3dv
--------------------------------------------------------------------
REST and REST API

REST:
-----
It is an architecture guidlines to develop web api(it is neither a framework nor a library)

REST API:
--------
The API which is developed using REST is known as REST API/RESTful API.
-------------------------------------------------------------------------
How REST web API works
Android application(client)<-------->web api<-------->web application <----> database
> client make http request to API
> API will communicate with web application/database(if needed)
> web application/database provides required data to API
> API return response data to client 

Note JSON data /XML data 

-----------------------------------------------------------------------
REST API : CRUD operation :--
--------
Operation             HTTP Methods                        Description 
Create                  POST                            creating/positng/ inserting data 
Read                    GET                             Reading/getting/ retriving data
Update                  PUT/PATCH                       updating data
                                                            complete update-PUT
                                                            Partial update-PATCH
Delete                  DELETE                          deleting data


--------------------------------------------------------------------------
Example:

student API Resource 
---------------------
http://geekyshows.com/api/student

1> geekyshows.com --> Base URL
2> /api/--->naming convention 
3> student --> Resource of API or end point
-------------------------------------------------
Request-response
----------------
> request for all student 


Request                                                         response
GET:geekyshows/api/student                                      [{"id":1,"name":"rahul"},{"id":2,"name":"Sohan"} ...]

Request of One student having id =1
GET:geekyshows/api/student/1                                    [{"id":1,"name":"rahul"}]

Request posting/creating/inserting data 
Request

POST:geekyshows/api/student                                     Response
{"name":"Rohan"}                                                {"id":11,"name":"Rohan"}

PUT or PATCH: geekyshows/api/student/1                          Response
{"name":"Raj"}                                                  [{"id":1,"name":"Raj"}]

Request for delete data, id=1
Request                                                         Response
DELETE:geekyshows/api/student/1                                 [{"id":1,"name":"Raj"}]

------------------------------------------------------------------------------------------------------------------------------------------------
Django REST Framework:
---------------------
Django REST framework is a powerful flexible toolkit for building web APIs.

> The web browsable API is a huge usaility win for your developers
> Authentication policies inluding packages for OAuth1 and OAuth2.
> Serialization that supports both ORM and non-ORM data sources.
> Customizable all the way down- just use regular function -based views if you don't need the powerful features.
> Extensive documentation, and great community support.
> Used and trusted buy interantinally recognized companies including Mozilla, Red Hat, Heroku,and Eventbrite.

-----------------------------------------------------------------------------------------
Requirements:
---------------
> Python 
> Django

The following packages are optional:
> PyYAML, uritemplate(5.1+,3.0.3+)-Schema generation support 
> Markdown(3.0.0+)-Markdown support for the browsable API.
> Pygments(2.4.0+)-Add syntax highlighting to markdown processing.
> django-filter(1.0.1+)-filtering support 
> django-guardian(1.1.+)-Object level permission support.

----------------------------------------------------------
How to install DRF(Django Restframework
-------------------
Install using pip 
> pip install djangorestframework

------------------------------------------------
How to use in our project of django 
----------------------------------
Installing DRF to Django project 

INSTALLED_APPS=[
    ...
    'rest_framework',
]


installing required file using commands:

pip install django 
pip install djangorestframework
django-admin --version (to check version of django)
pip freeze (to see all the install package)
pip uninstall djangorestframework   (to remove djangorestframework)


==========================================================================================
Django Restframework : Concept(Serializer and Serializer class)
--------------------------------------------------------------
Python has a built in package called json, which is used to work with json data.

dumps(data)-this is used to convert python object into json string.

Example;
To used json package First we have to import it.

import json    # it is python package 
python_data={'name':'krishna','roll':1}
json_data=json.dumps(python_data)
print(json_data)
{"name":"krishna","roll":1}

# NOTE: coversion of python object into json term called "dumps"

# Note2: conversion of JSON to python object back called "load"
load(data)--> this is used to parse json string.
Example:
import json
json_data={"name":"krishna","roll"1}
parsed_data=json.loads(json_data)
print(parsed_data)
{'name':'krishna','roll':1}


Serializers:
-----------
In Django REST framework, serializers are responsible for converting complex data such as querysets and model instances to native python datatypes
(called serialization)that can then be easily rendered into JSON, XML or other content types which is understandable by front end.

Serializers are also responsible for deserialization which means it allows parsed data to be converted back into complex types, after first validation the incoming data.

> Serialization 
> Deserialization 

A serializer class is very similar to a Django Form and ModelForm class, and includes similar validataion flags on the various fields, such as required, max_length and default.

> DRF provided a Serializer class which gives you a powerful, generic way to control the output of your responses, as well as ModelSerializer class which provides
 a useful shortcut for creating serializers that deal with model instances and querysets.

How to create a serializer class :
-----------------------------------
create a seperate serializer.py file to write all Serializers

from rest_framework import serializers

class StudentSerializer(serializers.Serializer):
    name=serializers.CharField(max_length=100)
    roll=serializers.IntegerField()
    city=serializers.CharField(max_length=100)


====================================================================================================================
model.py <this is a file name>

from django.db import models
class Student(models.Model):
    name=models.CharField(max_length=100)
    roll=models.IntegerField()
    city=models.CharField(max_length=100)


# Run makemigrations and migrate commands   # this command we run to generate sql query
=========================================================
create a table in database:
----------------------------
ID          Name            Roll            city
1           Sonam           101             Ranchi
2           rahul           102             Ranchi
3           Raj             103             Bokaro
========================================================
this data stored in database ==> to used this data in frontend first we have to convert the data into "JSON DATA" formate

                    Serialization                                   Render into JSON
complex datatype -----------------------> python native datatype ----------------------->JSON Data


Serialization
=============
The process of coverting complex data such as querysets and model instances to native Python datatypes are called as Serialization in DRF.

> Creating model instance stu(it just a name of a model)
    stu=Student.object.get(id=1)

> Converting model instance stu to Python Dict/Serializing Object
    serializer=StudentSerializer(stu)
    
==============================================================================
creating Query set(mean when we get all the data)
 stu=Student.objects.all()

> converting Query set stu to List of Python Dict/Serializing Query set
    serializer=StudentSerializer(stu,many=True)    # many=True beacuse it contain many object 

------------------------------
Serializer.data: it is used to see all the data of serializer
--------------
This is the serialized data.
serializer.data 

---------------------------------------
JSONRenderer
-------------
This is used to render Serialized data into JSOn which is understandable by Front End.
Importing JSONRenderer
from rest_framework.render(serializer.data)

summary:
----------
Complex datatype
Model Object1 --stu=Student.object.get(id=1)--serialization--> Python Native DataType---(serializer=StudentSerializer(stu))-->JSON Data(json_data=JSONRenderer().render(serializer.data))
 























































